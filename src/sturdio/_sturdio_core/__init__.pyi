"""

SturdIO
======

Daniel Sturdivant's basic file reading/writing utilities

Contains the following modules:

1. `BinaryFile`
2. `YamlParser`
3. `iotools`

"""

from __future__ import annotations
import typing
from . import iotools

__all__ = ["BinaryFile", "YamlParser", "iotools"]

class BinaryFile:
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, fname: str) -> None: ...
    def fclose(self) -> bool: ...
    @typing.overload
    def fopen(self) -> bool: ...
    @typing.overload
    def fopen(self, fname: str) -> bool: ...
    @typing.overload
    def fread(self, arg0: int, arg1: int) -> bool: ...
    @typing.overload
    def fread(self, arg0: int, arg1: int) -> bool: ...
    @typing.overload
    def fread(self, arg0: float, arg1: int) -> bool: ...
    @typing.overload
    def fread(self, arg0: float, arg1: int) -> bool: ...
    @typing.overload
    def freadc(self, arg0: ..., arg1: int) -> bool: ...
    @typing.overload
    def freadc(self, arg0: ..., arg1: int) -> bool: ...
    @typing.overload
    def freadc(self, arg0: ..., arg1: int) -> bool: ...
    @typing.overload
    def freadc(self, arg0: ..., arg1: int) -> bool: ...
    @typing.overload
    def fseek(self, arg0: int) -> bool: ...
    @typing.overload
    def fseek(self, arg0: int) -> bool: ...
    @typing.overload
    def fseek(self, arg0: int) -> bool: ...
    @typing.overload
    def fseek(self, arg0: int) -> bool: ...
    @typing.overload
    def fseekc(self, arg0: int) -> bool: ...
    @typing.overload
    def fseekc(self, arg0: int) -> bool: ...
    @typing.overload
    def fseekc(self, arg0: int) -> bool: ...
    @typing.overload
    def fseekc(self, arg0: int) -> bool: ...
    @typing.overload
    def ftell(self) -> int: ...
    @typing.overload
    def ftell(self) -> int: ...
    @typing.overload
    def ftell(self) -> int: ...
    @typing.overload
    def ftell(self) -> int: ...
    @typing.overload
    def ftell(self) -> int: ...
    @typing.overload
    def ftell(self) -> int: ...
    @typing.overload
    def ftell(self) -> int: ...
    @typing.overload
    def ftell(self) -> int: ...

class YamlParser:
    def Exists(self, key: str) -> bool: ...
    @typing.overload
    def GetVar(self, key: str) -> str: ...
    @typing.overload
    def GetVar(self, key: str) -> bool: ...
    @typing.overload
    def GetVar(self, key: str) -> int: ...
    @typing.overload
    def GetVar(self, key: str) -> float: ...
    @typing.overload
    def GetVar(self, key: str) -> float: ...
    @typing.overload
    def GetVar(self, key: str) -> list[bool]: ...
    @typing.overload
    def GetVar(self, key: str) -> list[int]: ...
    @typing.overload
    def GetVar(self, key: str) -> list[float]: ...
    @typing.overload
    def GetVar(self, key: str) -> list[float]: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, fname: str) -> None: ...
    @typing.overload
    def parse(self) -> None: ...
    @typing.overload
    def parse(self, fname: str) -> None: ...

__version__: str = "1.0.0"
